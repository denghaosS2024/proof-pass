openapi: 3.0.3
info:
  title: ZK Ticketing API
  version: 0.0.1
servers:
- url: http://localhost:3000/api/v1
paths:
  /health:
    get:
      responses:
        "200":
          description: The API is healthy
      summary: Check the health of the API
  /events:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: List of events
      summary: Get list of events
  /events/{eventId}:
    get:
      parameters:
      - explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event details
      summary: Get event details
  /user/request-verification-code:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailVerificationRequest'
        required: true
      responses:
        "200":
          description: Verification code sent successfully
      summary: Request an email verification code
  /user/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Login successful
      summary: User login
  /user/me:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User details retrieved successfully
      security:
      - bearerAuth: []
      summary: Get user details
  /user/update:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User details updated successfully
      security:
      - bearerAuth: []
      summary: Update user details
  /user/me/email-credential:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailCredential'
          description: User email credential retrieved successfully
      security:
      - bearerAuth: []
      summary: Get user email credential
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEmailCredentialRequest'
        required: true
      responses:
        "201":
          description: Email credential stored successfully
      security:
      - bearerAuth: []
      summary: Store user email credential with encrypted data
  /user/me/ticket-credentials:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TicketCredential'
                type: array
          description: User credentials retrieved successfully
      security:
      - bearerAuth: []
      summary: Get user ticket credentials
  /user/me/request-email-credential:
    post:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnencryptedEmailCredential'
          description: Email credential generated successfully
      security:
      - bearerAuth: []
      summary: Generate a new email credential
components:
  schemas:
    Event:
      example:
        admin_code: admin_code
        name: name
        description: description
        id: id
        url: url
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        admin_code:
          type: string
      type: object
    UserEmailVerificationRequest:
      example:
        email: email
      properties:
        email:
          type: string
      type: object
    UserLogin:
      example:
        code: code
        email: email
      properties:
        email:
          type: string
        code:
          type: string
      type: object
    LoginResponse:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    User:
      example:
        encrypted_internal_nullifier: encrypted_internal_nullifier
        identity_commitment: identity_commitment
        encrypted_identity_secret: encrypted_identity_secret
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        identity_commitment:
          type: string
        encrypted_internal_nullifier:
          type: string
        encrypted_identity_secret:
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    UserUpdate:
      example:
        encrypted_internal_nullifier: encrypted_internal_nullifier
        identity_commitment: identity_commitment
        encrypted_identity_secret: encrypted_identity_secret
      properties:
        identity_commitment:
          type: string
        encrypted_internal_nullifier:
          type: string
        encrypted_identity_secret:
          type: string
      type: object
    EmailCredential:
      example:
        identity_commitment: identity_commitment
        data: data
        expire_at: 2000-01-23T04:56:07.000+00:00
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        identity_commitment:
          type: string
        data:
          type: string
        issued_at:
          format: date-time
          type: string
        expire_at:
          format: date-time
          type: string
      type: object
    PutEmailCredentialRequest:
      example:
        data: data
        expire_at: 2000-01-23T04:56:07.000+00:00
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        data:
          type: string
        issued_at:
          format: date-time
          type: string
        expire_at:
          format: date-time
          type: string
      type: object
    UnencryptedEmailCredential:
      example:
        credential: credential
        expire_at: 2000-01-23T04:56:07.000+00:00
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        credential:
          type: string
        issued_at:
          format: date-time
          type: string
        expire_at:
          format: date-time
          type: string
      type: object
    TicketCredential:
      example:
        event_id: event_id
        data: data
        expire_at: 2000-01-23T04:56:07.000+00:00
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        event_id:
          type: string
        data:
          type: string
        issued_at:
          format: date-time
          type: string
        expire_at:
          format: date-time
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
