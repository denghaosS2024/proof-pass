// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package attendances

import (
	"context"
)

const createOne = `-- name: CreateOne :one
INSERT INTO attendances (event_id, nullifier, created_at)
VALUES ($1, $2, NOW())
RETURNING id, event_id, nullifier, created_at
`

type CreateOneParams struct {
	EventID   string
	Nullifier string
}

func (q *Queries) CreateOne(ctx context.Context, arg CreateOneParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, createOne, arg.EventID, arg.Nullifier)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Nullifier,
		&i.CreatedAt,
	)
	return i, err
}

const getAttendancesByEventIdAndNullifier = `-- name: GetAttendancesByEventIdAndNullifier :many
SELECT id, event_id, nullifier, created_at
FROM attendances
WHERE event_id = $1
    AND nullifier = $2
`

type GetAttendancesByEventIdAndNullifierParams struct {
	EventID   string
	Nullifier string
}

func (q *Queries) GetAttendancesByEventIdAndNullifier(ctx context.Context, arg GetAttendancesByEventIdAndNullifierParams) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, getAttendancesByEventIdAndNullifier, arg.EventID, arg.Nullifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Nullifier,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
