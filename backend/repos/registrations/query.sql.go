// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package registrations

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEventRegistrations = `-- name: GetEventRegistrations :many
SELECT id, event_id, email
FROM registrations
WHERE event_id = $1
`

func (q *Queries) GetEventRegistrations(ctx context.Context, eventID pgtype.Int4) ([]Registration, error) {
	rows, err := q.db.Query(ctx, getEventRegistrations, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Registration
	for rows.Next() {
		var i Registration
		if err := rows.Scan(&i.ID, &i.EventID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegisteredEventsByEmail = `-- name: GetRegisteredEventsByEmail :many
SELECT id, event_id, email
FROM registrations
WHERE email = $1
`

func (q *Queries) GetRegisteredEventsByEmail(ctx context.Context, email string) ([]Registration, error) {
	rows, err := q.db.Query(ctx, getRegisteredEventsByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Registration
	for rows.Next() {
		var i Registration
		if err := rows.Scan(&i.ID, &i.EventID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
