// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package ticket_credentials

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateOne = `-- name: CreateOrUpdateOne :one
INSERT INTO ticket_credentials (
        id,
        email,
        event_id,
        data,
        issued_at,
        expire_at
    )
VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (event_id, email) DO
UPDATE
SET id = $1,
    data = $4,
    issued_at = $5,
    expire_at = $6
RETURNING id, email, event_id, data, issued_at, expire_at
`

type CreateOrUpdateOneParams struct {
	ID       string
	Email    string
	EventID  string
	Data     string
	IssuedAt pgtype.Timestamptz
	ExpireAt pgtype.Timestamptz
}

func (q *Queries) CreateOrUpdateOne(ctx context.Context, arg CreateOrUpdateOneParams) (TicketCredential, error) {
	row := q.db.QueryRow(ctx, createOrUpdateOne,
		arg.ID,
		arg.Email,
		arg.EventID,
		arg.Data,
		arg.IssuedAt,
		arg.ExpireAt,
	)
	var i TicketCredential
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EventID,
		&i.Data,
		&i.IssuedAt,
		&i.ExpireAt,
	)
	return i, err
}

const getAllByEmail = `-- name: GetAllByEmail :many
SELECT id, email, event_id, data, issued_at, expire_at
FROM ticket_credentials
WHERE email = $1
ORDER BY issued_at DESC
`

func (q *Queries) GetAllByEmail(ctx context.Context, email string) ([]TicketCredential, error) {
	rows, err := q.db.Query(ctx, getAllByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketCredential
	for rows.Next() {
		var i TicketCredential
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.EventID,
			&i.Data,
			&i.IssuedAt,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByEventIdAndEmail = `-- name: GetByEventIdAndEmail :one
SELECT id, email, event_id, data, issued_at, expire_at
FROM ticket_credentials
WHERE event_id = $1
    AND email = $2
LIMIT 1
`

type GetByEventIdAndEmailParams struct {
	EventID string
	Email   string
}

func (q *Queries) GetByEventIdAndEmail(ctx context.Context, arg GetByEventIdAndEmailParams) (TicketCredential, error) {
	row := q.db.QueryRow(ctx, getByEventIdAndEmail, arg.EventID, arg.Email)
	var i TicketCredential
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EventID,
		&i.Data,
		&i.IssuedAt,
		&i.ExpireAt,
	)
	return i, err
}
