// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package users

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        email,
        identity_commitment,
        encrypted_internal_nullifier,
        encrypted_identity_secret,
        created_at
    )
VALUES ($1, NULL, NULL, NULL, NOW())
RETURNING id, email, identity_commitment, encrypted_internal_nullifier, encrypted_identity_secret, created_at
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IdentityCommitment,
		&i.EncryptedInternalNullifier,
		&i.EncryptedIdentitySecret,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, identity_commitment, encrypted_internal_nullifier, encrypted_identity_secret, created_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IdentityCommitment,
		&i.EncryptedInternalNullifier,
		&i.EncryptedIdentitySecret,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, identity_commitment, encrypted_internal_nullifier, encrypted_identity_secret, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IdentityCommitment,
		&i.EncryptedInternalNullifier,
		&i.EncryptedIdentitySecret,
		&i.CreatedAt,
	)
	return i, err
}
