// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: issuer/v1/issuer.proto

package issuer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IssuerServiceClient is the client API for IssuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssuerServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GenerateSignedCredential(ctx context.Context, in *GenerateSignedCredentialRequest, opts ...grpc.CallOption) (*GenerateSignedCredentialResponse, error)
}

type issuerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuerServiceClient(cc grpc.ClientConnInterface) IssuerServiceClient {
	return &issuerServiceClient{cc}
}

func (c *issuerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/issuer.v1.IssuerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) GenerateSignedCredential(ctx context.Context, in *GenerateSignedCredentialRequest, opts ...grpc.CallOption) (*GenerateSignedCredentialResponse, error) {
	out := new(GenerateSignedCredentialResponse)
	err := c.cc.Invoke(ctx, "/issuer.v1.IssuerService/GenerateSignedCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServiceServer is the server API for IssuerService service.
// All implementations should embed UnimplementedIssuerServiceServer
// for forward compatibility
type IssuerServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GenerateSignedCredential(context.Context, *GenerateSignedCredentialRequest) (*GenerateSignedCredentialResponse, error)
}

// UnimplementedIssuerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIssuerServiceServer struct {
}

func (UnimplementedIssuerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedIssuerServiceServer) GenerateSignedCredential(context.Context, *GenerateSignedCredentialRequest) (*GenerateSignedCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSignedCredential not implemented")
}

// UnsafeIssuerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuerServiceServer will
// result in compilation errors.
type UnsafeIssuerServiceServer interface {
	mustEmbedUnimplementedIssuerServiceServer()
}

func RegisterIssuerServiceServer(s grpc.ServiceRegistrar, srv IssuerServiceServer) {
	s.RegisterService(&IssuerService_ServiceDesc, srv)
}

func _IssuerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.v1.IssuerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_GenerateSignedCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSignedCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).GenerateSignedCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.v1.IssuerService/GenerateSignedCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).GenerateSignedCredential(ctx, req.(*GenerateSignedCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssuerService_ServiceDesc is the grpc.ServiceDesc for IssuerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssuerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "issuer.v1.IssuerService",
	HandlerType: (*IssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IssuerService_Ping_Handler,
		},
		{
			MethodName: "GenerateSignedCredential",
			Handler:    _IssuerService_GenerateSignedCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issuer/v1/issuer.proto",
}
